# coding: utf-8

"""
    EAI Toolkit

    EAI Toolkit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eai_toolkit_client.api_client import ApiClient
from eai_toolkit_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class TeamApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_cluster_team_get(self, **kwargs):  # noqa: E501
        """Get teams in the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_cluster_team_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TeamList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_cluster_team_get_with_http_info(**kwargs)  # noqa: E501

    def v1_cluster_team_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get teams in the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_cluster_team_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TeamList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'order', 'q', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_cluster_team_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'limit' in local_var_params and local_var_params['limit'] > 1024:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_cluster_team_get`, must be a value less than or equal to `1024`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_cluster_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v1_cluster_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_cluster_team_get`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_cluster_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/cluster/team', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_organization_team_get(self, organization_id, **kwargs):  # noqa: E501
        """Get teams in the organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_organization_team_get(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str organization_id: The ID or fullname of the organization (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TeamList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_organization_team_get_with_http_info(organization_id, **kwargs)  # noqa: E501

    def v1_organization_team_get_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Get teams in the organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_organization_team_get_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str organization_id: The ID or fullname of the organization (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TeamList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'limit', 'offset', 'order', 'q', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_organization_team_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in local_var_params or
                local_var_params['organization_id'] is None):
            raise ApiValueError("Missing the required parameter `organization_id` when calling `v1_organization_team_get`")  # noqa: E501

        if 'limit' in local_var_params and local_var_params['limit'] > 1024:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_organization_team_get`, must be a value less than or equal to `1024`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_organization_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v1_organization_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_organization_team_get`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_organization_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organization_id'] = local_var_params['organization_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/organization/{organization_id}/team', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_organization_team_post(self, organization_id, **kwargs):  # noqa: E501
        """Create team in the organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_organization_team_post(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str organization_id: The ID or fullname of the organization (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Team team:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_organization_team_post_with_http_info(organization_id, **kwargs)  # noqa: E501

    def v1_organization_team_post_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Create team in the organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_organization_team_post_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str organization_id: The ID or fullname of the organization (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Team team:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Team, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_id', 'human', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_organization_team_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in local_var_params or
                local_var_params['organization_id'] is None):
            raise ApiValueError("Missing the required parameter `organization_id` when calling `v1_organization_team_post`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_organization_team_post`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_organization_team_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization_id' in local_var_params:
            path_params['organization_id'] = local_var_params['organization_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'team' in local_var_params:
            body_params = local_var_params['team']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/organization/{organization_id}/team', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_shortcut_team_get(self, **kwargs):  # noqa: E501
        """Get teams in your organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_shortcut_team_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TeamList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_shortcut_team_get_with_http_info(**kwargs)  # noqa: E501

    def v1_shortcut_team_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get teams in your organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_shortcut_team_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TeamList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'order', 'q', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_shortcut_team_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'limit' in local_var_params and local_var_params['limit'] > 1024:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_shortcut_team_get`, must be a value less than or equal to `1024`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_shortcut_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v1_shortcut_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_shortcut_team_get`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_shortcut_team_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_shortcut_team_post(self, **kwargs):  # noqa: E501
        """Create team in your organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_shortcut_team_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int human: Turns on fields pretty output if set to 1
        :param Team team:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_shortcut_team_post_with_http_info(**kwargs)  # noqa: E501

    def v1_shortcut_team_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create team in your organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_shortcut_team_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int human: Turns on fields pretty output if set to 1
        :param Team team:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Team, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['human', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_shortcut_team_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_shortcut_team_post`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_shortcut_team_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'team' in local_var_params:
            body_params = local_var_params['team']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_get_by_id(self, team_id, **kwargs):  # noqa: E501
        """Get the team identified by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_get_by_id(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname associated to the team (required)
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_get_by_id_with_http_info(team_id, **kwargs)  # noqa: E501

    def v1_team_get_by_id_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Get the team identified by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_get_by_id_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname associated to the team (required)
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Team, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_get_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_get_by_id`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_get_by_id`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_get_by_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_head_by_id(self, team_id, **kwargs):  # noqa: E501
        """Check access to the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_head_by_id(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_head_by_id_with_http_info(team_id, **kwargs)  # noqa: E501

    def v1_team_head_by_id_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Check access to the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_head_by_id_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_head_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_head_by_id`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_head_by_id`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_head_by_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_member_delete(self, team_id, member_id, **kwargs):  # noqa: E501
        """Delete a member in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_member_delete(team_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str member_id: The ID or fullname of the member (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_member_delete_with_http_info(team_id, member_id, **kwargs)  # noqa: E501

    def v1_team_member_delete_with_http_info(self, team_id, member_id, **kwargs):  # noqa: E501
        """Delete a member in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_member_delete_with_http_info(team_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str member_id: The ID or fullname of the member (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_member_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_member_delete`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in local_var_params or
                local_var_params['member_id'] is None):
            raise ApiValueError("Missing the required parameter `member_id` when calling `v1_team_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501
        if 'member_id' in local_var_params:
            path_params['member_id'] = local_var_params['member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/member/{member_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_member_get(self, team_id, **kwargs):  # noqa: E501
        """Get members in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_member_get(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param str type: Type of the resource to add (team or user)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_member_get_with_http_info(team_id, **kwargs)  # noqa: E501

    def v1_team_member_get_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Get members in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_member_get_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param str type: Type of the resource to add (team or user)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResourceList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'limit', 'offset', 'order', 'q', 'human', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_member_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_member_get`")  # noqa: E501

        if 'limit' in local_var_params and local_var_params['limit'] > 1024:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_team_member_get`, must be a value less than or equal to `1024`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_team_member_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v1_team_member_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_member_get`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_member_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_member_post(self, team_id, member_id, **kwargs):  # noqa: E501
        """Post a member in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_member_post(team_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str member_id: The ID or fullname of the member (required)
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_member_post_with_http_info(team_id, member_id, **kwargs)  # noqa: E501

    def v1_team_member_post_with_http_info(self, team_id, member_id, **kwargs):  # noqa: E501
        """Post a member in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_member_post_with_http_info(team_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str member_id: The ID or fullname of the member (required)
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'member_id', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_member_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_member_post`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in local_var_params or
                local_var_params['member_id'] is None):
            raise ApiValueError("Missing the required parameter `member_id` when calling `v1_team_member_post`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_member_post`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_member_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501
        if 'member_id' in local_var_params:
            path_params['member_id'] = local_var_params['member_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/member/{member_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_policy_delete(self, team_id, policy_id, **kwargs):  # noqa: E501
        """Delete a policy in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_policy_delete(team_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str policy_id: The ID or fullname of the policy (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_policy_delete_with_http_info(team_id, policy_id, **kwargs)  # noqa: E501

    def v1_team_policy_delete_with_http_info(self, team_id, policy_id, **kwargs):  # noqa: E501
        """Delete a policy in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_policy_delete_with_http_info(team_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str policy_id: The ID or fullname of the policy (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_policy_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_policy_delete`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in local_var_params or
                local_var_params['policy_id'] is None):
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_team_policy_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501
        if 'policy_id' in local_var_params:
            path_params['policy_id'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/policy/{policy_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_policy_get(self, team_id, **kwargs):  # noqa: E501
        """Get policies in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_policy_get(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Rule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_policy_get_with_http_info(team_id, **kwargs)  # noqa: E501

    def v1_team_policy_get_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Get policies in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_policy_get_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Rule], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'limit', 'offset', 'order', 'q', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_policy_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_policy_get`")  # noqa: E501

        if 'limit' in local_var_params and local_var_params['limit'] > 1024:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_team_policy_get`, must be a value less than or equal to `1024`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_team_policy_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v1_team_policy_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_policy_get`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_policy_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Rule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_policy_post(self, team_id, policy_id, **kwargs):  # noqa: E501
        """Post a policy in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_policy_post(team_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str policy_id: The ID or fullname of the policy (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Policy policy:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_policy_post_with_http_info(team_id, policy_id, **kwargs)  # noqa: E501

    def v1_team_policy_post_with_http_info(self, team_id, policy_id, **kwargs):  # noqa: E501
        """Post a policy in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_policy_post_with_http_info(team_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str policy_id: The ID or fullname of the policy (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Policy policy:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Policy, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'policy_id', 'human', 'policy']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_policy_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_policy_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in local_var_params or
                local_var_params['policy_id'] is None):
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_team_policy_post`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_policy_post`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_policy_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501
        if 'policy_id' in local_var_params:
            path_params['policy_id'] = local_var_params['policy_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'policy' in local_var_params:
            body_params = local_var_params['policy']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_put_by_id(self, team_id, **kwargs):  # noqa: E501
        """Update team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_put_by_id(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Team team:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_put_by_id_with_http_info(team_id, **kwargs)  # noqa: E501

    def v1_team_put_by_id_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Update team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_put_by_id_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Team team:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Team, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'human', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_put_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_put_by_id`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_put_by_id`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_put_by_id`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'team' in local_var_params:
            body_params = local_var_params['team']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_role_get(self, team_id, **kwargs):  # noqa: E501
        """Get roles in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_role_get(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RoleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_role_get_with_http_info(team_id, **kwargs)  # noqa: E501

    def v1_team_role_get_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Get roles in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_role_get_with_http_info(team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param int limit: Maximum number of data objects to return
        :param int offset: Number of items to skip before returning the results.
        :param str order: Order for the results.
        :param str q: Filtering query.
        :param int human: Turns on fields pretty output if set to 1
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RoleList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'limit', 'offset', 'order', 'q', 'human']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_role_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_role_get`")  # noqa: E501

        if 'limit' in local_var_params and local_var_params['limit'] > 1024:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_team_role_get`, must be a value less than or equal to `1024`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v1_team_role_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v1_team_role_get`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_role_get`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_role_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_team_role_post(self, team_id, role_id, **kwargs):  # noqa: E501
        """Post a role in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_role_post(team_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str role_id: The ID or fullname of the role (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Role role:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_team_role_post_with_http_info(team_id, role_id, **kwargs)  # noqa: E501

    def v1_team_role_post_with_http_info(self, team_id, role_id, **kwargs):  # noqa: E501
        """Post a role in the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_team_role_post_with_http_info(team_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_id: The ID or fullname of the team (required)
        :param str role_id: The ID or fullname of the role (required)
        :param int human: Turns on fields pretty output if set to 1
        :param Role role:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Role, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_id', 'role_id', 'human', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_team_role_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in local_var_params or
                local_var_params['team_id'] is None):
            raise ApiValueError("Missing the required parameter `team_id` when calling `v1_team_role_post`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ApiValueError("Missing the required parameter `role_id` when calling `v1_team_role_post`")  # noqa: E501

        if 'human' in local_var_params and local_var_params['human'] > 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_role_post`, must be a value less than or equal to `1`")  # noqa: E501
        if 'human' in local_var_params and local_var_params['human'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `human` when calling `v1_team_role_post`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_id' in local_var_params:
            path_params['team_id'] = local_var_params['team_id']  # noqa: E501
        if 'role_id' in local_var_params:
            path_params['role_id'] = local_var_params['role_id']  # noqa: E501

        query_params = []
        if 'human' in local_var_params:
            query_params.append(('human', local_var_params['human']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'role' in local_var_params:
            body_params = local_var_params['role']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/team/{team_id}/role', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
