# coding: utf-8

"""
    EAI Toolkit

    EAI Toolkit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_url': 'str',
        'account': 'FieldAccount',
        'alive': 'bool',
        'children': 'list[JobChildrenByState]',
        'created': 'str',
        'creator': 'FieldCreator',
        'full_name': 'str',
        'jobspec': 'JobSpec',
        'name': 'str',
        'organization': 'FieldOrganization',
        'resource_usage_url': 'str',
        'runs': 'list[JobRun]',
        'state': 'JobState',
        'state_info': 'str',
        'total_runtime': 'str',
        'updated_on': 'str',
        'urn': 'str'
    }

    attribute_map = {
        'access_url': 'accessUrl',
        'account': 'account',
        'alive': 'alive',
        'children': 'children',
        'created': 'created',
        'creator': 'creator',
        'full_name': 'fullName',
        'jobspec': 'jobspec',
        'name': 'name',
        'organization': 'organization',
        'resource_usage_url': 'resourceUsageUrl',
        'runs': 'runs',
        'state': 'state',
        'state_info': 'stateInfo',
        'total_runtime': 'totalRuntime',
        'updated_on': 'updatedOn',
        'urn': 'urn'
    }

    def __init__(self, access_url=None, account=None, alive=None, children=None, created=None, creator=None, full_name=None, jobspec=None, name=None, organization=None, resource_usage_url=None, runs=None, state=None, state_info=None, total_runtime=None, updated_on=None, urn=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501

        self._access_url = None
        self._account = None
        self._alive = None
        self._children = None
        self._created = None
        self._creator = None
        self._full_name = None
        self._jobspec = None
        self._name = None
        self._organization = None
        self._resource_usage_url = None
        self._runs = None
        self._state = None
        self._state_info = None
        self._total_runtime = None
        self._updated_on = None
        self._urn = None
        self.discriminator = None

        if access_url is not None:
            self.access_url = access_url
        self.account = account
        if alive is not None:
            self.alive = alive
        if children is not None:
            self.children = children
        self.created = created
        self.creator = creator
        if full_name is not None:
            self.full_name = full_name
        if jobspec is not None:
            self.jobspec = jobspec
        if name is not None:
            self.name = name
        self.organization = organization
        if resource_usage_url is not None:
            self.resource_usage_url = resource_usage_url
        if runs is not None:
            self.runs = runs
        if state is not None:
            self.state = state
        if state_info is not None:
            self.state_info = state_info
        if total_runtime is not None:
            self.total_runtime = total_runtime
        if updated_on is not None:
            self.updated_on = updated_on
        self.urn = urn

    @property
    def access_url(self):
        """Gets the access_url of this Job.  # noqa: E501


        :return: The access_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url):
        """Sets the access_url of this Job.


        :param access_url: The access_url of this Job.  # noqa: E501
        :type: str
        """

        self._access_url = access_url

    @property
    def account(self):
        """Gets the account of this Job.  # noqa: E501


        :return: The account of this Job.  # noqa: E501
        :rtype: FieldAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Job.


        :param account: The account of this Job.  # noqa: E501
        :type: FieldAccount
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def alive(self):
        """Gets the alive of this Job.  # noqa: E501


        :return: The alive of this Job.  # noqa: E501
        :rtype: bool
        """
        return self._alive

    @alive.setter
    def alive(self, alive):
        """Sets the alive of this Job.


        :param alive: The alive of this Job.  # noqa: E501
        :type: bool
        """

        self._alive = alive

    @property
    def children(self):
        """Gets the children of this Job.  # noqa: E501


        :return: The children of this Job.  # noqa: E501
        :rtype: list[JobChildrenByState]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Job.


        :param children: The children of this Job.  # noqa: E501
        :type: list[JobChildrenByState]
        """

        self._children = children

    @property
    def created(self):
        """Gets the created of this Job.  # noqa: E501


        :return: The created of this Job.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Job.


        :param created: The created of this Job.  # noqa: E501
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def creator(self):
        """Gets the creator of this Job.  # noqa: E501


        :return: The creator of this Job.  # noqa: E501
        :rtype: FieldCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Job.


        :param creator: The creator of this Job.  # noqa: E501
        :type: FieldCreator
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def full_name(self):
        """Gets the full_name of this Job.  # noqa: E501


        :return: The full_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Job.


        :param full_name: The full_name of this Job.  # noqa: E501
        :type: str
        """
        if full_name is not None and not re.search(r'^|[a-z0-9_]+(\.[a-z0-9_]+)*$', full_name):  # noqa: E501
            raise ValueError(r"Invalid value for `full_name`, must be a follow pattern or equal to `/^|[a-z0-9_]+(\.[a-z0-9_]+)*$/`")  # noqa: E501

        self._full_name = full_name

    @property
    def jobspec(self):
        """Gets the jobspec of this Job.  # noqa: E501


        :return: The jobspec of this Job.  # noqa: E501
        :rtype: JobSpec
        """
        return self._jobspec

    @jobspec.setter
    def jobspec(self, jobspec):
        """Sets the jobspec of this Job.


        :param jobspec: The jobspec of this Job.  # noqa: E501
        :type: JobSpec
        """

        self._jobspec = jobspec

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501


        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.


        :param name: The name of this Job.  # noqa: E501
        :type: str
        """
        if name is not None and not re.search(r'^[a-z0-9_]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-z0-9_]*$/`")  # noqa: E501

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Job.  # noqa: E501


        :return: The organization of this Job.  # noqa: E501
        :rtype: FieldOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Job.


        :param organization: The organization of this Job.  # noqa: E501
        :type: FieldOrganization
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def resource_usage_url(self):
        """Gets the resource_usage_url of this Job.  # noqa: E501


        :return: The resource_usage_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._resource_usage_url

    @resource_usage_url.setter
    def resource_usage_url(self, resource_usage_url):
        """Sets the resource_usage_url of this Job.


        :param resource_usage_url: The resource_usage_url of this Job.  # noqa: E501
        :type: str
        """

        self._resource_usage_url = resource_usage_url

    @property
    def runs(self):
        """Gets the runs of this Job.  # noqa: E501


        :return: The runs of this Job.  # noqa: E501
        :rtype: list[JobRun]
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this Job.


        :param runs: The runs of this Job.  # noqa: E501
        :type: list[JobRun]
        """

        self._runs = runs

    @property
    def state(self):
        """Gets the state of this Job.  # noqa: E501


        :return: The state of this Job.  # noqa: E501
        :rtype: JobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.


        :param state: The state of this Job.  # noqa: E501
        :type: JobState
        """

        self._state = state

    @property
    def state_info(self):
        """Gets the state_info of this Job.  # noqa: E501


        :return: The state_info of this Job.  # noqa: E501
        :rtype: str
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this Job.


        :param state_info: The state_info of this Job.  # noqa: E501
        :type: str
        """

        self._state_info = state_info

    @property
    def total_runtime(self):
        """Gets the total_runtime of this Job.  # noqa: E501


        :return: The total_runtime of this Job.  # noqa: E501
        :rtype: str
        """
        return self._total_runtime

    @total_runtime.setter
    def total_runtime(self, total_runtime):
        """Sets the total_runtime of this Job.


        :param total_runtime: The total_runtime of this Job.  # noqa: E501
        :type: str
        """

        self._total_runtime = total_runtime

    @property
    def updated_on(self):
        """Gets the updated_on of this Job.  # noqa: E501


        :return: The updated_on of this Job.  # noqa: E501
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Job.


        :param updated_on: The updated_on of this Job.  # noqa: E501
        :type: str
        """

        self._updated_on = updated_on

    @property
    def urn(self):
        """Gets the urn of this Job.  # noqa: E501

        URN of the resource  # noqa: E501

        :return: The urn of this Job.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this Job.

        URN of the resource  # noqa: E501

        :param urn: The urn of this Job.  # noqa: E501
        :type: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")  # noqa: E501
        if urn is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(account|policy|role|user|team):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(data|job|service|role|policy):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?)?$', urn):  # noqa: E501
            raise ValueError(r"Invalid value for `urn`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(account|policy|role|user|team):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(data|job|service|role|policy):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?)?$/`")  # noqa: E501

        self._urn = urn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
