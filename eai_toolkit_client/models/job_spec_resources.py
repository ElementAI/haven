# coding: utf-8

"""
    EAI Toolkit

    EAI Toolkit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobSpecResources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu': 'int',
        'cpu_model': 'str',
        'cuda_version': 'int',
        'gpu': 'int',
        'gpu_mem': 'int',
        'gpu_model': 'str',
        'gpu_tensor_cores': 'bool',
        'inference': 'bool',
        'mem': 'int'
    }

    attribute_map = {
        'cpu': 'cpu',
        'cpu_model': 'cpuModel',
        'cuda_version': 'cudaVersion',
        'gpu': 'gpu',
        'gpu_mem': 'gpuMem',
        'gpu_model': 'gpuModel',
        'gpu_tensor_cores': 'gpuTensorCores',
        'inference': 'inference',
        'mem': 'mem'
    }

    def __init__(self, cpu=None, cpu_model=None, cuda_version=None, gpu=None, gpu_mem=None, gpu_model=None, gpu_tensor_cores=None, inference=None, mem=None):  # noqa: E501
        """JobSpecResources - a model defined in OpenAPI"""  # noqa: E501

        self._cpu = None
        self._cpu_model = None
        self._cuda_version = None
        self._gpu = None
        self._gpu_mem = None
        self._gpu_model = None
        self._gpu_tensor_cores = None
        self._inference = None
        self._mem = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if cpu_model is not None:
            self.cpu_model = cpu_model
        if cuda_version is not None:
            self.cuda_version = cuda_version
        if gpu is not None:
            self.gpu = gpu
        if gpu_mem is not None:
            self.gpu_mem = gpu_mem
        if gpu_model is not None:
            self.gpu_model = gpu_model
        if gpu_tensor_cores is not None:
            self.gpu_tensor_cores = gpu_tensor_cores
        if inference is not None:
            self.inference = inference
        if mem is not None:
            self.mem = mem

    @property
    def cpu(self):
        """Gets the cpu of this JobSpecResources.  # noqa: E501


        :return: The cpu of this JobSpecResources.  # noqa: E501
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this JobSpecResources.


        :param cpu: The cpu of this JobSpecResources.  # noqa: E501
        :type: int
        """
        if cpu is not None and cpu < 1:  # noqa: E501
            raise ValueError("Invalid value for `cpu`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cpu = cpu

    @property
    def cpu_model(self):
        """Gets the cpu_model of this JobSpecResources.  # noqa: E501


        :return: The cpu_model of this JobSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this JobSpecResources.


        :param cpu_model: The cpu_model of this JobSpecResources.  # noqa: E501
        :type: str
        """

        self._cpu_model = cpu_model

    @property
    def cuda_version(self):
        """Gets the cuda_version of this JobSpecResources.  # noqa: E501


        :return: The cuda_version of this JobSpecResources.  # noqa: E501
        :rtype: int
        """
        return self._cuda_version

    @cuda_version.setter
    def cuda_version(self, cuda_version):
        """Sets the cuda_version of this JobSpecResources.


        :param cuda_version: The cuda_version of this JobSpecResources.  # noqa: E501
        :type: int
        """

        self._cuda_version = cuda_version

    @property
    def gpu(self):
        """Gets the gpu of this JobSpecResources.  # noqa: E501


        :return: The gpu of this JobSpecResources.  # noqa: E501
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this JobSpecResources.


        :param gpu: The gpu of this JobSpecResources.  # noqa: E501
        :type: int
        """
        if gpu is not None and gpu < 0:  # noqa: E501
            raise ValueError("Invalid value for `gpu`, must be a value greater than or equal to `0`")  # noqa: E501

        self._gpu = gpu

    @property
    def gpu_mem(self):
        """Gets the gpu_mem of this JobSpecResources.  # noqa: E501


        :return: The gpu_mem of this JobSpecResources.  # noqa: E501
        :rtype: int
        """
        return self._gpu_mem

    @gpu_mem.setter
    def gpu_mem(self, gpu_mem):
        """Sets the gpu_mem of this JobSpecResources.


        :param gpu_mem: The gpu_mem of this JobSpecResources.  # noqa: E501
        :type: int
        """
        if gpu_mem is not None and gpu_mem < 1:  # noqa: E501
            raise ValueError("Invalid value for `gpu_mem`, must be a value greater than or equal to `1`")  # noqa: E501

        self._gpu_mem = gpu_mem

    @property
    def gpu_model(self):
        """Gets the gpu_model of this JobSpecResources.  # noqa: E501


        :return: The gpu_model of this JobSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model

    @gpu_model.setter
    def gpu_model(self, gpu_model):
        """Sets the gpu_model of this JobSpecResources.


        :param gpu_model: The gpu_model of this JobSpecResources.  # noqa: E501
        :type: str
        """

        self._gpu_model = gpu_model

    @property
    def gpu_tensor_cores(self):
        """Gets the gpu_tensor_cores of this JobSpecResources.  # noqa: E501


        :return: The gpu_tensor_cores of this JobSpecResources.  # noqa: E501
        :rtype: bool
        """
        return self._gpu_tensor_cores

    @gpu_tensor_cores.setter
    def gpu_tensor_cores(self, gpu_tensor_cores):
        """Sets the gpu_tensor_cores of this JobSpecResources.


        :param gpu_tensor_cores: The gpu_tensor_cores of this JobSpecResources.  # noqa: E501
        :type: bool
        """

        self._gpu_tensor_cores = gpu_tensor_cores

    @property
    def inference(self):
        """Gets the inference of this JobSpecResources.  # noqa: E501


        :return: The inference of this JobSpecResources.  # noqa: E501
        :rtype: bool
        """
        return self._inference

    @inference.setter
    def inference(self, inference):
        """Sets the inference of this JobSpecResources.


        :param inference: The inference of this JobSpecResources.  # noqa: E501
        :type: bool
        """

        self._inference = inference

    @property
    def mem(self):
        """Gets the mem of this JobSpecResources.  # noqa: E501


        :return: The mem of this JobSpecResources.  # noqa: E501
        :rtype: int
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this JobSpecResources.


        :param mem: The mem of this JobSpecResources.  # noqa: E501
        :type: int
        """
        if mem is not None and mem < 1:  # noqa: E501
            raise ValueError("Invalid value for `mem`, must be a value greater than or equal to `1`")  # noqa: E501

        self._mem = mem

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSpecResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
