# coding: utf-8

"""
    EAI Toolkit

    EAI Toolkit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cancel_requested_on': 'str',
        'created_on': 'str',
        'ended_on': 'str',
        'exit_code': 'int',
        'id': 'str',
        'info': 'str',
        'ip': 'str',
        'job_id': 'str',
        'node_name': 'str',
        'queued_on': 'str',
        'resource_usage_url': 'str',
        'run_time': 'str',
        'started_on': 'str',
        'startup_time': 'str',
        'state': 'JobState',
        'total_time': 'str',
        'waiting_time': 'str'
    }

    attribute_map = {
        'cancel_requested_on': 'cancelRequestedOn',
        'created_on': 'createdOn',
        'ended_on': 'endedOn',
        'exit_code': 'exitCode',
        'id': 'id',
        'info': 'info',
        'ip': 'ip',
        'job_id': 'jobId',
        'node_name': 'nodeName',
        'queued_on': 'queuedOn',
        'resource_usage_url': 'resourceUsageUrl',
        'run_time': 'runTime',
        'started_on': 'startedOn',
        'startup_time': 'startupTime',
        'state': 'state',
        'total_time': 'totalTime',
        'waiting_time': 'waitingTime'
    }

    def __init__(self, cancel_requested_on=None, created_on=None, ended_on=None, exit_code=None, id=None, info=None, ip=None, job_id=None, node_name=None, queued_on=None, resource_usage_url=None, run_time=None, started_on=None, startup_time=None, state=None, total_time=None, waiting_time=None):  # noqa: E501
        """JobRun - a model defined in OpenAPI"""  # noqa: E501

        self._cancel_requested_on = None
        self._created_on = None
        self._ended_on = None
        self._exit_code = None
        self._id = None
        self._info = None
        self._ip = None
        self._job_id = None
        self._node_name = None
        self._queued_on = None
        self._resource_usage_url = None
        self._run_time = None
        self._started_on = None
        self._startup_time = None
        self._state = None
        self._total_time = None
        self._waiting_time = None
        self.discriminator = None

        if cancel_requested_on is not None:
            self.cancel_requested_on = cancel_requested_on
        if created_on is not None:
            self.created_on = created_on
        if ended_on is not None:
            self.ended_on = ended_on
        self.exit_code = exit_code
        self.id = id
        if info is not None:
            self.info = info
        if ip is not None:
            self.ip = ip
        if job_id is not None:
            self.job_id = job_id
        if node_name is not None:
            self.node_name = node_name
        if queued_on is not None:
            self.queued_on = queued_on
        if resource_usage_url is not None:
            self.resource_usage_url = resource_usage_url
        if run_time is not None:
            self.run_time = run_time
        if started_on is not None:
            self.started_on = started_on
        if startup_time is not None:
            self.startup_time = startup_time
        if state is not None:
            self.state = state
        if total_time is not None:
            self.total_time = total_time
        if waiting_time is not None:
            self.waiting_time = waiting_time

    @property
    def cancel_requested_on(self):
        """Gets the cancel_requested_on of this JobRun.  # noqa: E501


        :return: The cancel_requested_on of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._cancel_requested_on

    @cancel_requested_on.setter
    def cancel_requested_on(self, cancel_requested_on):
        """Sets the cancel_requested_on of this JobRun.


        :param cancel_requested_on: The cancel_requested_on of this JobRun.  # noqa: E501
        :type: str
        """

        self._cancel_requested_on = cancel_requested_on

    @property
    def created_on(self):
        """Gets the created_on of this JobRun.  # noqa: E501


        :return: The created_on of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this JobRun.


        :param created_on: The created_on of this JobRun.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def ended_on(self):
        """Gets the ended_on of this JobRun.  # noqa: E501


        :return: The ended_on of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._ended_on

    @ended_on.setter
    def ended_on(self, ended_on):
        """Sets the ended_on of this JobRun.


        :param ended_on: The ended_on of this JobRun.  # noqa: E501
        :type: str
        """

        self._ended_on = ended_on

    @property
    def exit_code(self):
        """Gets the exit_code of this JobRun.  # noqa: E501


        :return: The exit_code of this JobRun.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this JobRun.


        :param exit_code: The exit_code of this JobRun.  # noqa: E501
        :type: int
        """
        if exit_code is not None and exit_code > 255:  # noqa: E501
            raise ValueError("Invalid value for `exit_code`, must be a value less than or equal to `255`")  # noqa: E501
        if exit_code is not None and exit_code < 0:  # noqa: E501
            raise ValueError("Invalid value for `exit_code`, must be a value greater than or equal to `0`")  # noqa: E501

        self._exit_code = exit_code

    @property
    def id(self):
        """Gets the id of this JobRun.  # noqa: E501


        :return: The id of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobRun.


        :param id: The id of this JobRun.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def info(self):
        """Gets the info of this JobRun.  # noqa: E501


        :return: The info of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this JobRun.


        :param info: The info of this JobRun.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def ip(self):
        """Gets the ip of this JobRun.  # noqa: E501


        :return: The ip of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this JobRun.


        :param ip: The ip of this JobRun.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def job_id(self):
        """Gets the job_id of this JobRun.  # noqa: E501


        :return: The job_id of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobRun.


        :param job_id: The job_id of this JobRun.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def node_name(self):
        """Gets the node_name of this JobRun.  # noqa: E501


        :return: The node_name of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this JobRun.


        :param node_name: The node_name of this JobRun.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def queued_on(self):
        """Gets the queued_on of this JobRun.  # noqa: E501


        :return: The queued_on of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._queued_on

    @queued_on.setter
    def queued_on(self, queued_on):
        """Sets the queued_on of this JobRun.


        :param queued_on: The queued_on of this JobRun.  # noqa: E501
        :type: str
        """

        self._queued_on = queued_on

    @property
    def resource_usage_url(self):
        """Gets the resource_usage_url of this JobRun.  # noqa: E501


        :return: The resource_usage_url of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._resource_usage_url

    @resource_usage_url.setter
    def resource_usage_url(self, resource_usage_url):
        """Sets the resource_usage_url of this JobRun.


        :param resource_usage_url: The resource_usage_url of this JobRun.  # noqa: E501
        :type: str
        """

        self._resource_usage_url = resource_usage_url

    @property
    def run_time(self):
        """Gets the run_time of this JobRun.  # noqa: E501


        :return: The run_time of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this JobRun.


        :param run_time: The run_time of this JobRun.  # noqa: E501
        :type: str
        """

        self._run_time = run_time

    @property
    def started_on(self):
        """Gets the started_on of this JobRun.  # noqa: E501


        :return: The started_on of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._started_on

    @started_on.setter
    def started_on(self, started_on):
        """Sets the started_on of this JobRun.


        :param started_on: The started_on of this JobRun.  # noqa: E501
        :type: str
        """

        self._started_on = started_on

    @property
    def startup_time(self):
        """Gets the startup_time of this JobRun.  # noqa: E501


        :return: The startup_time of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._startup_time

    @startup_time.setter
    def startup_time(self, startup_time):
        """Sets the startup_time of this JobRun.


        :param startup_time: The startup_time of this JobRun.  # noqa: E501
        :type: str
        """

        self._startup_time = startup_time

    @property
    def state(self):
        """Gets the state of this JobRun.  # noqa: E501


        :return: The state of this JobRun.  # noqa: E501
        :rtype: JobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobRun.


        :param state: The state of this JobRun.  # noqa: E501
        :type: JobState
        """

        self._state = state

    @property
    def total_time(self):
        """Gets the total_time of this JobRun.  # noqa: E501


        :return: The total_time of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this JobRun.


        :param total_time: The total_time of this JobRun.  # noqa: E501
        :type: str
        """

        self._total_time = total_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this JobRun.  # noqa: E501


        :return: The waiting_time of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this JobRun.


        :param waiting_time: The waiting_time of this JobRun.  # noqa: E501
        :type: str
        """

        self._waiting_time = waiting_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
