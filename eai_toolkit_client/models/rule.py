# coding: utf-8

"""
    EAI Toolkit

    EAI Toolkit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Rule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'expression': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'action': 'action',
        'expression': 'expression',
        'policy': 'policy'
    }

    def __init__(self, action=None, expression=None, policy=None):  # noqa: E501
        """Rule - a model defined in OpenAPI"""  # noqa: E501

        self._action = None
        self._expression = None
        self._policy = None
        self.discriminator = None

        self.action = action
        self.expression = expression
        if policy is not None:
            self.policy = policy

    @property
    def action(self):
        """Gets the action of this Rule.  # noqa: E501


        :return: The action of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Rule.


        :param action: The action of this Rule.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        if action is not None and not re.search(r'^\*|(organization|account|role|policy|user|team|data|service|job|\*):([a-z]+|\*)$', action):  # noqa: E501
            raise ValueError(r"Invalid value for `action`, must be a follow pattern or equal to `/^\*|(organization|account|role|policy|user|team|data|service|job|\*):([a-z]+|\*)$/`")  # noqa: E501

        self._action = action

    @property
    def expression(self):
        """Gets the expression of this Rule.  # noqa: E501


        :return: The expression of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Rule.


        :param expression: The expression of this Rule.  # noqa: E501
        :type: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")  # noqa: E501
        if expression is not None and not re.search(r'^\*|[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(account|policy|role|user|team):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(data|job|service|job|role|policy):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?)?(:\*)?$', expression):  # noqa: E501
            raise ValueError(r"Invalid value for `expression`, must be a follow pattern or equal to `/^\*|[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(account|policy|role|user|team):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:(data|job|service|job|role|policy):[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?)?(:\*)?$/`")  # noqa: E501

        self._expression = expression

    @property
    def policy(self):
        """Gets the policy of this Rule.  # noqa: E501


        :return: The policy of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Rule.


        :param policy: The policy of this Rule.  # noqa: E501
        :type: str
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
